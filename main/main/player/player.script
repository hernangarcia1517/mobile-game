require "main.game_module"
local speed = 2000
local midpoint = get_screen_width() / 2 --Find middle of screen (for touch input)
local max_x = get_screen_width() - 30
local min_x = 30
function init(self)
	-- Add initialization code here
	--This line will allow the scprit to get input from the player
	msg.post(".", "acquire_input_focus")
	--The current speed of the player
	self.velocity = vmath.vector3()
	self.input = vmath.vector3()
	self.life = true
	self.current_animation = hash("left")
	self.collision = false
	self.particle_play = "#player-left"
	self.explosion_playing = false
	self.music_on = get_music_play()
	self.SFX_on = get_SFX_play()
	music_check(self)
	particlefx.play("#player-left")
	
end

function update(self, dt)
	if self.life then
		--This line of code is going to normalize diagonal movement (which we won't have)
		if vmath.length_sqr(self.input) > 1 then
			self.input = vmath.normalize(self.input)
		end
		
		local acceleration = self.input * speed

		local dv = acceleration * dt
		local v0 = self.velocity
		local v1 = self.velocity + dv

		local movement = (v0 + v1) * dt * 0.5
		local pos = go.get_position()
		
		local w_pos = go.get_world_position()
--If we are within our boundaries then we will set our position as usual
		if (w_pos.x <= max_x) and (w_pos.x >= min_x) then
			go.set_position(pos + movement)
--If we are outside our boundaries then we have to set our velocity to 0
--to stop our moving object so we can reset our movement			
		elseif (w_pos.x > max_x) and (self.input.x < 0) then
			self.velocity = vmath.vector3() --Reseting our velocity
			v0 = self.velocity
			v1 = self.velocity + dv
			
			movement = (v0 + v1) * dt * 5 --x5 To make moving out the side fast
			pos = go.get_position()

			go.set_position(pos + movement)
		elseif (w_pos.x < min_x) and (self.input.x > 0) then
			self.velocity = vmath.vector3() --Reseting our velocity
			v0 = self.velocity
			v1 = self.velocity + dv
			
			movement = (v0 + v1) * dt * 5 --x5 To make moving out the sides fast
			pos = go.get_position()
			
			go.set_position(pos + movement)
		end

		find_play(self) --Line line is going to play animation for our movement
		particle_play(self)
		
		self.velocity = v1
		self.input = vmath.vector3()
	end
end
--This function is going to handle all the messages passed to our player
function on_message(self, message_id, message, sender)
	if message_id == hash("animation_done") then
		--Once our animation is done we are going to delete our player GO
		go.delete()
		msg.post("main:/manager#manager", "player_death")
	elseif message_id == hash("collision_response") then
		self.life = false
		--If there is a collision we are going to stop our music
		stop_music(self)
		--If there is a colision we are going to run our explosion animation
		anim_play(self, hash("death"))
		--The next line of code is going to run the explosion SFX
		soundFX_play(self)
		--The next line of code is going to run player_death()
		player_death(self, true)
	end
end
--This function is going to move the square from left to right
function on_input(self, action_id, action)
	--COMPUTER INPUT
	--NOTICE, the player does not have access to up and down motion
	if action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	end
	--TOUCH INPUT
	if action_id == hash("touch") then
		if action.touch then
			for _, touchdata in ipairs(action.touch) do
				if touchdata.x < midpoint then
					self.input.x = -1
				elseif touchdata.x > midpoint then
					self.input.x = 1
				end
			end
		end
	end
end
--This method is going to send a message to all game objects that our player has died
function player_death(self, collided)
	if self.collision ~= collided then
		self.collision = true
		local death = "player_death" --Variable with string "player_death"
		--pass message to interface that the player is dead
		msg.post("/guis#score", death)
		--pass messsage to the triangle-factory that the player is dead
		msg.post("/enemy-factory#enemy-factory", death)
		--pass message to the background that the player is dead
		msg.post("/background#background", death)
		--pass message to all the bubble factories that the player is dead
		msg.post("/b_b-factory#b_b-factory", death)
		msg.post("/mb_b-factory#mb_b-factory", death)
		msg.post("/m_b-factory#m_b-factory", death)
		msg.post("/s_b-factory#s_b-factory", death)
	end
end
--This function is going to find what animation we should play next
function find_play(self)
	local anim = self.current_animation
	if self.input.x > 0 then
		anim = hash("right")
	elseif self.input.x < 0 then
		anim = hash("left")
	end
	anim_play(self, anim) --This method will play our animation, but will handle some issues
end
--This function is going to play our animation, unless it is already playing
function anim_play(self, animation)
	if self.current_animation ~= animation then
	self.current_animation = animation
	sprite.play_flipbook("#sprite", animation)
	end
end

function soundFX_play(self)
	if self.SFX_on == true and self.explosion_playing == false then
		sound.play("#explosion")
		self.explosion_playing = true
	end
end
--This fucntion is going to play our particle animations, AND handle exceptions
function particle_play(self)
	if self.input.x > 0 then --right
		if self.particle_play ~= "#player-right" then
			self.particle_play = "#player-right"
			particlefx.stop("#player-left")
			particlefx.play("#player-right")
		end
	elseif self.input.x < 0 then --left
		if self.particle_play ~= "#player-left" then
			self.particle_play = "#player-left"
			particlefx.stop("#player-right")
			particlefx.play("#player-left")
		end
	end
end

function music_check(self)
	if self.music_on then
		sound.play("#music-intro")
		delay.seconds(24, function(self)
			sound.play("#music-outro") --I didn't like the delay of sound.play()
		end)
	end
end

function stop_music(self)
	if self.music_on == true then
		self.music_on = false
		sound.stop("#music-intro")
		sound.stop("#music-outro")
	end
end